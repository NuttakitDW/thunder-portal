openapi: 3.0.3
info:
  title: Thunder Portal - Cross-Chain Swap API
  description: |
    Native Bitcoin integration for 1inch Fusion+ enabling trustless ETH ↔ BTC atomic swaps.
    
    ## Overview
    Thunder Portal acts as a cross-chain resolver that coordinates atomic swaps between
    Ethereum (ETH, USDC, etc.) and Bitcoin using HTLCs on both chains.
    
    ## Key Principles
    - Both chains use HTLCs for atomic guarantees
    - Bitcoin timeout MUST be 2x Ethereum timeout
    - Proper order of operations prevents race conditions
    - No trust required - mathematical guarantees only
    
    ## Testnet Resources
    - Bitcoin testnet faucet: https://bitcoinfaucet.uo1.net/
    - Ethereum Sepolia faucet: https://sepoliafaucet.com/
  version: 1.0.0
  contact:
    name: Thunder Portal Team
    url: https://github.com/thunder-portal

servers:
  - url: https://api.thunderportal.io/v1
    description: Production server
  - url: https://testnet-api.thunderportal.io/v1
    description: Testnet server

security:
  - ApiKeyAuth: []

tags:
  - name: Orders
    description: Create and manage cross-chain swap orders
  - name: HTLCs
    description: Bitcoin HTLC operations
  - name: Status
    description: Monitor order and transaction status

paths:
  /orders:
    post:
      tags:
        - Orders
      summary: Create cross-chain swap order
      description: |
        Creates a new atomic swap order between Ethereum and Bitcoin.
        
        **ETH→BTC Flow:**
        1. Create order with Fusion+ order proof
        2. Thunder Portal creates and funds Bitcoin HTLC
        3. User can claim BTC after resolver claims ETH
        
        **BTC→ETH Flow:**
        1. Create order with swap details
        2. User creates Bitcoin HTLC
        3. Thunder Portal fills Fusion+ after HTLC confirmed
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrderResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /orders/{orderId}:
    get:
      tags:
        - Status
      summary: Get order details
      description: Retrieve current status and details of a swap order
      operationId: getOrder
      parameters:
        - $ref: '#/components/parameters/OrderId'
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetails'
        '404':
          $ref: '#/components/responses/NotFound'

  /orders/{orderId}/fusion-proof:
    post:
      tags:
        - Orders
      summary: Submit Fusion+ order proof
      description: |
        Submit proof of Fusion+ order creation. Required for both swap directions:
        - **ETH→BTC**: Submit before Thunder Portal creates Bitcoin HTLC
        - **BTC→ETH**: Submit so Thunder Portal knows which order to fill
      operationId: submitFusionProof
      parameters:
        - $ref: '#/components/parameters/OrderId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FusionProofRequest'
      responses:
        '200':
          description: Fusion proof accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FusionProofResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /htlc/create:
    post:
      tags:
        - HTLCs
      summary: Create Bitcoin HTLC
      description: |
        Generate a Bitcoin HTLC script and P2SH address for atomic swaps.
        Returns the redeem script and address to fund for creating an HTLC on-chain.
      operationId: createHtlc
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHtlcRequest'
      responses:
        '200':
          description: HTLC created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateHtlcResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /htlc/verify:
    post:
      tags:
        - HTLCs
      summary: Verify Bitcoin HTLC
      description: |
        For BTC→ETH swaps: Verify user-created Bitcoin HTLC meets requirements.
        Checks script structure, amounts, timeouts, and public keys.
      operationId: verifyHtlc
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyHtlcRequest'
      responses:
        '200':
          description: HTLC verification result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyHtlcResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /htlc/{htlcId}/claim:
    post:
      tags:
        - HTLCs
      summary: Claim Bitcoin HTLC
      description: |
        Claim Bitcoin from HTLC by revealing the preimage.
        For ETH→BTC: Used by users after resolver reveals secret on Ethereum.
      operationId: claimHtlc
      parameters:
        - $ref: '#/components/parameters/HtlcId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClaimRequest'
      responses:
        '200':
          description: HTLC claimed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /htlc/{htlcId}/refund:
    post:
      tags:
        - HTLCs
      summary: Refund Bitcoin HTLC
      description: |
        Refund HTLC after timeout. Only callable by resolver after timeout height.
        Used when swap fails or expires.
      operationId: refundHtlc
      parameters:
        - $ref: '#/components/parameters/HtlcId'
      responses:
        '200':
          description: HTLC refunded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: HTLC not eligible for refund (timeout not reached)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transactions/{txId}/status:
    get:
      tags:
        - Status
      summary: Get Bitcoin transaction status
      description: Check confirmations and status of a Bitcoin transaction
      operationId: getTransactionStatus
      parameters:
        - name: txId
          in: path
          required: true
          schema:
            type: string
            pattern: '^[a-fA-F0-9]{64}$'
      responses:
        '200':
          description: Transaction status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionStatus'
        '404':
          $ref: '#/components/responses/NotFound'

  /webhooks:
    post:
      tags:
        - Status
      summary: Register webhook
      description: Register webhook URL for order status updates
      operationId: registerWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookRegistration'
      responses:
        '201':
          description: Webhook registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /health:
    get:
      tags:
        - Status
      summary: Service health check
      description: |
        Check if Thunder Portal service is healthy and all dependencies are connected.
        Use this endpoint for monitoring and load balancer health checks.
      operationId: healthCheck
      security: []  # No auth required for health checks
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /fees/estimate:
    get:
      tags:
        - Orders
      summary: Estimate swap fees
      description: |
        Get fee estimation for a swap including Bitcoin network fees, resolver fees, and total costs.
        This helps users understand the economics before creating an order.
      operationId: estimateFees
      parameters:
        - name: direction
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/SwapDirection'
        - name: amount
          in: query
          required: true
          schema:
            type: string
            description: Amount in smallest unit (satoshis or wei)
        - name: fromToken
          in: query
          required: false
          schema:
            type: string
            description: For ETH_TO_BTC - token address or symbol
        - name: toToken
          in: query
          required: false
          schema:
            type: string
            description: For BTC_TO_ETH - token address or symbol
        - name: urgent
          in: query
          required: false
          schema:
            type: boolean
            default: false
            description: Use higher fees for faster confirmation
      responses:
        '200':
          description: Fee estimation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeeEstimate'
        '400':
          $ref: '#/components/responses/BadRequest'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  parameters:
    OrderId:
      name: orderId
      in: path
      required: true
      schema:
        type: string
        format: uuid
        
    HtlcId:
      name: htlcId
      in: path
      required: true
      schema:
        type: string
        format: uuid

  schemas:
    SwapDirection:
      type: string
      enum: [ETH_TO_BTC, BTC_TO_ETH]
      description: |
        - ETH_TO_BTC: Swap ETH/ERC20 to Bitcoin
        - BTC_TO_ETH: Swap Bitcoin to ETH/ERC20

    TokenInfo:
      type: object
      required:
        - symbol
        - address
      properties:
        symbol:
          type: string
          description: Token symbol (ETH, USDC, USDT, etc.)
          example: USDC
        address:
          type: string
          description: Token contract address (0x0 for ETH)
          pattern: '^0x[a-fA-F0-9]{40}$'
          example: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"

    CreateOrderRequest:
      type: object
      required:
        - direction
        - amount
        - preimageHash
      properties:
        direction:
          $ref: '#/components/schemas/SwapDirection'
        amount:
          type: string
          description: Amount in smallest unit (wei for ETH, satoshis for BTC)
          example: "1000000000000000000"
        
        # For ETH_TO_BTC swaps
        fromToken:
          $ref: '#/components/schemas/TokenInfo'
          description: Required for ETH_TO_BTC
        bitcoinAddress:
          type: string
          description: User's Bitcoin address to receive BTC (ETH_TO_BTC only)
          example: "bc1q..."
        bitcoinPublicKey:
          type: string
          description: User's Bitcoin public key for HTLC claim (ETH_TO_BTC only)
          pattern: '^[a-fA-F0-9]{66}$'
        
        # For BTC_TO_ETH swaps
        toToken:
          $ref: '#/components/schemas/TokenInfo'
          description: Required for BTC_TO_ETH
        ethereumAddress:
          type: string
          description: User's Ethereum address to receive tokens (BTC_TO_ETH only)
          pattern: '^0x[a-fA-F0-9]{40}$'
        
        # HTLC parameters
        preimageHash:
          type: string
          description: SHA256 hash of secret preimage (hex)
          pattern: '^[a-fA-F0-9]{64}$'
        
        # Resolver configuration
        resolverPublicKey:
          type: string
          description: Thunder Portal's Bitcoin public key for refunds
          pattern: '^[a-fA-F0-9]{66}$'
          example: "03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd"
          
        # Confirmation requirements
        confirmationRequirements:
          type: object
          properties:
            bitcoin:
              type: integer
              description: Required Bitcoin confirmations
              minimum: 1
              maximum: 6
              default: 3
            ethereum:
              type: integer
              description: Required Ethereum confirmations
              minimum: 1
              maximum: 20
              default: 12
              
        # Timeout configuration
        timeouts:
          type: object
          properties:
            ethereumBlocks:
              type: integer
              description: Ethereum timeout in blocks (~12 sec/block)
              minimum: 100
              maximum: 500
              default: 300
            bitcoinBlocks:
              type: integer
              description: Bitcoin timeout in blocks (~10 min/block)
              minimum: 50
              maximum: 300
              default: 144

    CreateOrderResponse:
      type: object
      required:
        - orderId
        - direction
        - status
        - expectedSteps
        - expiresAt
      properties:
        orderId:
          type: string
          format: uuid
        direction:
          $ref: '#/components/schemas/SwapDirection'
        status:
          $ref: '#/components/schemas/OrderStatus'
        expectedSteps:
          type: array
          description: Next steps for the user
          items:
            type: string
          example:
            - "Create Fusion+ order on Ethereum"
            - "Submit Fusion+ proof to /orders/{orderId}/fusion-proof"
            - "Wait for Bitcoin HTLC creation"
        
        # For ETH_TO_BTC: Instructions
        ethToBtcInstructions:
          type: object
          properties:
            fusionOrderRequirements:
              type: object
              description: Requirements for Fusion+ order
              properties:
                resolverAddress:
                  type: string
                  description: Thunder Portal resolver address on Ethereum
                  pattern: '^0x[a-fA-F0-9]{40}$'
                preimageHash:
                  type: string
                  description: Must use this hash in Fusion+ order
                tokenAmount:
                  type: string
                  description: Amount to lock in Fusion+ order
                deadline:
                  type: string
                  description: Fusion+ order deadline timestamp
        
        # For BTC_TO_ETH: HTLC requirements
        btcToEthInstructions:
          type: object
          properties:
            htlcRequirements:
              type: object
              description: Requirements for Bitcoin HTLC
              properties:
                userPublicKey:
                  type: string
                  description: Your public key for claiming
                resolverPublicKey:
                  type: string
                  description: Resolver's public key for refund
                paymentHash:
                  type: string
                  description: Hash to use in HTLC
                amount:
                  type: string
                  description: Amount to lock in satoshis
                timeoutHeight:
                  type: integer
                  description: Absolute block height for timeout
                scriptTemplate:
                  type: string
                  description: Example HTLC script structure
        
        expiresAt:
          type: string
          format: date-time

    FusionProofRequest:
      type: object
      required:
        - fusionOrderId
        - fusionOrderHash
        - fusionOrderSignature
      properties:
        fusionOrderId:
          type: string
          description: 1inch Fusion+ order ID
        fusionOrderHash:
          type: string
          description: EIP-712 order hash
          pattern: '^0x[a-fA-F0-9]{64}$'
        fusionOrderSignature:
          type: string
          description: User's signature of Fusion+ order
          pattern: '^0x[a-fA-F0-9]{130}$'
        fusionOrderData:
          type: object
          description: Full Fusion+ order data for verification
          properties:
            maker:
              type: string
              pattern: '^0x[a-fA-F0-9]{40}$'
            resolver:
              type: string
              pattern: '^0x[a-fA-F0-9]{40}$'
            srcToken:
              type: string
              pattern: '^0x[a-fA-F0-9]{40}$'
            dstToken:
              type: string
              pattern: '^0x[a-fA-F0-9]{40}$'
            srcAmount:
              type: string
            dstAmount:
              type: string
            deadline:
              type: string

    FusionProofResponse:
      type: object
      required:
        - accepted
        - nextStep
      properties:
        accepted:
          type: boolean
        nextStep:
          type: string
          description: What happens next
          example: "Bitcoin HTLC will be created and funded"
        bitcoinHtlc:
          type: object
          description: For ETH_TO_BTC - HTLC details
          properties:
            htlcId:
              type: string
              format: uuid
            address:
              type: string
              description: P2SH address of HTLC
            redeemScript:
              type: string
              description: HTLC redeem script (hex)
            amount:
              type: string
              description: Amount locked in satoshis
            timeoutHeight:
              type: integer
              description: Absolute timeout block height

    CreateHtlcRequest:
      type: object
      required:
        - preimageHash
        - userPublicKey
        - timeoutBlocks
      properties:
        preimageHash:
          type: string
          description: SHA256 hash of the preimage (hex)
          pattern: '^[a-fA-F0-9]{64}$'
          example: "66687aadf862bd776c8fc18b8e9f8e20089714856ee233b3902a591d0d5f2925"
        userPublicKey:
          type: string
          description: User's public key (hex)
          pattern: '^[a-fA-F0-9]{66}$'
          example: "0279BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798"
        resolverPublicKey:
          type: string
          description: Resolver's public key (hex). If not provided, userPublicKey is used for both roles.
          pattern: '^[a-fA-F0-9]{66}$'
          example: "0279BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798"
        timeoutBlocks:
          type: integer
          description: Number of blocks until timeout (typically 144 for ~24 hours)
          minimum: 1
          maximum: 2016
          example: 144

    CreateHtlcResponse:
      type: object
      required:
        - htlcScript
        - htlcAddress
        - htlcScriptHash
        - timeoutBlock
        - estimatedTimeoutTimestamp
      properties:
        htlcScript:
          type: string
          description: HTLC redeem script (hex)
          example: "63a820..."
        htlcAddress:
          type: string
          description: Bitcoin P2SH address to send funds to
          example: "2N8hwP1WmJrFF5QWABn38y63uYLhnJYJYTF"
        htlcScriptHash:
          type: string
          description: Hash160 of the redeem script (hex)
          example: "b7c4c7b600..."
        timeoutBlock:
          type: integer
          description: Absolute block height when HTLC expires
          example: 2500144
        estimatedTimeoutTimestamp:
          type: integer
          format: int64
          description: Estimated Unix timestamp when timeout occurs

    VerifyHtlcRequest:
      type: object
      required:
        - orderId
        - htlcAddress
        - redeemScript
      properties:
        orderId:
          type: string
          format: uuid
          description: Order this HTLC is for
        htlcAddress:
          type: string
          description: Bitcoin P2SH address of HTLC
          example: "3..."
        redeemScript:
          type: string
          description: HTLC redeem script (hex)
          pattern: '^[a-fA-F0-9]+$'
        fundingTxId:
          type: string
          description: Transaction that funded the HTLC
          pattern: '^[a-fA-F0-9]{64}$'

    VerifyHtlcResponse:
      type: object
      required:
        - valid
        - checks
      properties:
        valid:
          type: boolean
          description: Whether HTLC meets all requirements
        checks:
          type: object
          properties:
            scriptStructure:
              type: boolean
              description: Script has correct IF/ELSE structure
            paymentHash:
              type: boolean
              description: Payment hash matches order
            userPublicKey:
              type: boolean
              description: User can claim with preimage
            resolverPublicKey:
              type: boolean
              description: Resolver can refund after timeout
            timeoutValue:
              type: boolean
              description: Timeout is greater than Ethereum timeout
            addressDerivation:
              type: boolean
              description: Address correctly derived from script
        errors:
          type: array
          items:
            type: string
          example:
            - "Timeout too short: 100 blocks < required 144 blocks"
            - "Wrong payment hash"
        htlcId:
          type: string
          format: uuid
          description: HTLC ID if verification passed

    OrderDetails:
      type: object
      required:
        - orderId
        - direction
        - status
        - amounts
        - createdAt
        - updatedAt
      properties:
        orderId:
          type: string
          format: uuid
        direction:
          $ref: '#/components/schemas/SwapDirection'
        status:
          $ref: '#/components/schemas/OrderStatus'
        amounts:
          type: object
          properties:
            from:
              type: string
              description: Amount being swapped from
            to:
              type: string
              description: Amount being swapped to
            fromToken:
              $ref: '#/components/schemas/TokenInfo'
            toToken:
              $ref: '#/components/schemas/TokenInfo'
        
        # Fusion+ order details
        fusionOrder:
          type: object
          properties:
            orderId:
              type: string
            orderHash:
              type: string
            status:
              type: string
              enum: [pending, fillable, filling, filled, cancelled]
            resolverAddress:
              type: string
        
        # Bitcoin HTLC details
        bitcoinHtlc:
          type: object
          properties:
            htlcId:
              type: string
              format: uuid
            address:
              type: string
            scriptHash:
              type: string
            amount:
              type: string
            fundingTxId:
              type: string
            fundingConfirmations:
              type: integer
            claimTxId:
              type: string
            refundTxId:
              type: string
            timeoutHeight:
              type: integer
            status:
              type: string
              enum: [created, funded, claimed, refunded]
        
        # Ethereum transaction details
        ethereumTransactions:
          type: array
          items:
            type: object
            properties:
              txHash:
                type: string
              type:
                type: string
                enum: [approve, fill_order, claim]
              status:
                type: string
                enum: [pending, confirmed, failed]
              confirmations:
                type: integer
        
        error:
          type: string
          description: Error message if swap failed
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time

    OrderStatus:
      type: string
      enum:
        # Initial
        - created
        
        # ETH_TO_BTC flow
        - awaiting_fusion_proof
        - fusion_proof_verified
        - bitcoin_htlc_created
        - bitcoin_htlc_funded
        - fusion_order_fillable
        - fusion_order_filled
        - preimage_revealed
        
        # BTC_TO_ETH flow
        - awaiting_bitcoin_htlc
        - bitcoin_htlc_verified
        - bitcoin_htlc_funded_unconfirmed
        - bitcoin_htlc_confirmed
        - fusion_order_filling
        - fusion_order_filled
        
        # Terminal states
        - completed
        - refunded
        - expired
        - failed
      description: |
        Order status progression:
        
        **ETH_TO_BTC Flow:**
        - created → awaiting_fusion_proof
        - awaiting_fusion_proof → fusion_proof_verified
        - fusion_proof_verified → bitcoin_htlc_created
        - bitcoin_htlc_created → bitcoin_htlc_funded
        - bitcoin_htlc_funded → fusion_order_fillable
        - fusion_order_fillable → fusion_order_filled
        - fusion_order_filled → preimage_revealed
        - preimage_revealed → completed
        
        **BTC_TO_ETH Flow:**
        - created → awaiting_bitcoin_htlc
        - awaiting_bitcoin_htlc → bitcoin_htlc_verified
        - bitcoin_htlc_verified → bitcoin_htlc_funded_unconfirmed
        - bitcoin_htlc_funded_unconfirmed → bitcoin_htlc_confirmed
        - bitcoin_htlc_confirmed → fusion_order_filling
        - fusion_order_filling → fusion_order_filled
        - fusion_order_filled → completed

    ClaimRequest:
      type: object
      required:
        - preimage
      properties:
        preimage:
          type: string
          description: Secret preimage to claim HTLC (hex)
          pattern: '^[a-fA-F0-9]{64}$'
        claimAddress:
          type: string
          description: Optional Bitcoin address for receiving funds
          example: "bc1q..."

    ClaimResponse:
      type: object
      required:
        - txId
        - claimAddress
        - amount
      properties:
        txId:
          type: string
          pattern: '^[a-fA-F0-9]{64}$'
        claimAddress:
          type: string
        amount:
          type: string
          description: Amount claimed in satoshis

    RefundResponse:
      type: object
      required:
        - txId
        - refundAddress
        - amount
      properties:
        txId:
          type: string
          pattern: '^[a-fA-F0-9]{64}$'
        refundAddress:
          type: string
        amount:
          type: string
          description: Amount refunded in satoshis

    TransactionStatus:
      type: object
      required:
        - txId
        - status
        - confirmations
      properties:
        txId:
          type: string
        status:
          type: string
          enum: [pending, confirmed, failed]
        confirmations:
          type: integer
        blockHeight:
          type: integer
        fee:
          type: string
          description: Fee paid in satoshis

    WebhookRegistration:
      type: object
      required:
        - url
        - events
      properties:
        url:
          type: string
          format: uri
        events:
          type: array
          items:
            type: string
            enum:
              - order.created
              - order.fusion_proof_submitted
              - order.bitcoin_htlc_created
              - order.bitcoin_htlc_funded
              - order.bitcoin_htlc_verified
              - order.bitcoin_htlc_confirmed
              - order.fusion_order_filled
              - order.preimage_revealed
              - order.completed
              - order.failed
              - order.expired
              - order.refunded
        secret:
          type: string
          description: Secret for HMAC signature verification
          minLength: 32

    WebhookResponse:
      type: object
      required:
        - webhookId
        - url
        - events
      properties:
        webhookId:
          type: string
          format: uuid
        url:
          type: string
        events:
          type: array
          items:
            type: string
        secret:
          type: string

    HealthStatus:
      type: object
      required:
        - status
        - timestamp
        - dependencies
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
          description: Overall service health
        timestamp:
          type: string
          format: date-time
          description: Time of health check
        version:
          type: string
          description: API version
          example: "1.0.0"
        dependencies:
          type: object
          required:
            - bitcoinNode
            - ethereumRpc
            - database
          properties:
            bitcoinNode:
              type: object
              properties:
                connected:
                  type: boolean
                blockHeight:
                  type: integer
                  description: Current block height
                network:
                  type: string
                  enum: [mainnet, testnet, regtest]
                latency:
                  type: integer
                  description: Latency in milliseconds
            ethereumRpc:
              type: object
              properties:
                connected:
                  type: boolean
                chainId:
                  type: integer
                blockNumber:
                  type: integer
                latency:
                  type: integer
                  description: Latency in milliseconds
            database:
              type: object
              properties:
                connected:
                  type: boolean
                latency:
                  type: integer
                  description: Latency in milliseconds
            fusionApi:
              type: object
              properties:
                connected:
                  type: boolean
                latency:
                  type: integer
        resolver:
          type: object
          description: Resolver wallet status
          properties:
            bitcoinBalance:
              type: string
              description: Available BTC in satoshis
            ethereumBalance:
              type: string
              description: Available ETH in wei
            activeOrders:
              type: integer
              description: Number of orders in progress
    
    FeeEstimate:
      type: object
      required:
        - direction
        - amount
        - bitcoinNetworkFee
        - ethereumGasFee
        - resolverFee
        - totalFee
        - estimatedTime
      properties:
        direction:
          $ref: '#/components/schemas/SwapDirection'
        amount:
          type: string
          description: Swap amount in smallest unit
        bitcoinNetworkFee:
          type: object
          properties:
            satoshis:
              type: string
              description: Fee in satoshis
            satoshisPerVbyte:
              type: integer
              description: Current fee rate
            estimatedVsize:
              type: integer
              description: Estimated transaction size
        ethereumGasFee:
          type: object
          properties:
            wei:
              type: string
              description: Total gas cost in wei
            gasPrice:
              type: string
              description: Gas price in wei
            gasLimit:
              type: integer
              description: Estimated gas usage
        resolverFee:
          type: object
          properties:
            amount:
              type: string
              description: Resolver fee in output currency
            percentage:
              type: number
              format: float
              description: Fee as percentage of swap amount
              example: 0.5
        totalFee:
          type: object
          properties:
            inputCurrency:
              type: string
              description: Total fees in input currency
            outputCurrency:
              type: string
              description: Total fees in output currency
            percentage:
              type: number
              format: float
              description: Total fees as percentage
              example: 1.2
        estimatedTime:
          type: object
          properties:
            bitcoinConfirmations:
              type: integer
              description: Expected Bitcoin confirmations
            ethereumConfirmations:
              type: integer
              description: Expected Ethereum confirmations
            totalMinutes:
              type: integer
              description: Estimated total swap time in minutes
        warnings:
          type: array
          items:
            type: string
          example:
            - "High Bitcoin network congestion - fees elevated"
            - "Amount too small - fees exceed 5% of swap value"
        minimumAmount:
          type: string
          description: Minimum profitable swap amount
        maximumAmount:
          type: string
          description: Maximum available liquidity

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          example: "INVALID_AMOUNT"
        message:
          type: string
        details:
          type: object

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'